// Code generated for package main by go-bindata DO NOT EDIT. (@generated)
// sources:
// ab_views/layout.tpl.html
// ab_views/login.tpl.html
// ab_views/recover_end.tpl.html
// ab_views/recover_start.tpl.html
// ab_views/recovery2fa.tpl.html
// ab_views/register.tpl.html
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _ab_viewsLayoutTplHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x58\xe1\x6e\xdb\x38\x12\xfe\x5f\xa0\xef\xc0\xea\x50\xa0\xc5\x85\x92\xec\x24\xbe\xc4\x67\x1b\xed\xe5\xda\xbb\xe2\x80\x5c\x0f\xd7\x14\xbb\xfb\x8f\xa2\x46\xd2\xc4\x14\xa9\x25\x29\x39\x6a\x11\x60\x9f\x65\xff\xed\x6b\xec\xa3\xec\x93\x2c\x24\x59\x8e\x2c\x4b\x89\xbb\xfb\x27\x24\xf5\x0d\x87\x1f\xf9\x0d\x39\x13\x2f\x5e\xfc\xf3\xbf\x57\x9f\xbe\xff\xf8\x8e\x24\x36\x15\xab\xe7\xcf\x16\x55\x4b\x04\x93\xf1\xd2\x01\xe9\xac\x9e\x3f\x23\x84\x90\x45\x02\x2c\xdc\xf6\xeb\x71\x0a\x96\x11\x9e\x30\x6d\xc0\x2e\x9d\x9b\x4f\xef\xe9\x85\x73\x80\x27\xd6\x66\x14\x7e\xcc\xb1\x58\x3a\xdf\xd1\x9b\xb7\xf4\x4a\xa5\x19\xb3\x18\x08\x70\x08\x57\xd2\x82\xb4\x4b\xe7\xc3\xbb\x25\x84\x31\x1c\x4e\x97\x2c\x85\xa5\x53\x20\x6c\x32\xa5\x6d\x67\xc6\x06\x43\x9b\x2c\x43\x28\x90\x03\xad\x07\x27\x04\x25\x5a\x64\x82\x1a\xce\x04\x2c\x27\xae\xbf\xe7\x4f\xa0\x5c\x13\x0d\x62\xe9\x18\x5b\x0a\x30\x09\x80\x75\x48\xa2\x21\x5a\x3a\x15\x4b\x33\xf7\x3c\x1e\x4a\xf7\xd6\x84\x20\xb0\xd0\xae\x04\xeb\xc9\x2c\xf5\x38\x6a\x9d\x1b\x9a\xe3\x1b\xdf\xfd\x9b\xeb\xd3\x8c\x59\x9e\xb8\x13\x2f\x44\x63\xb7\xa0\x9b\xa2\x74\xb9\x31\x0e\x41\x69\x21\xd6\x68\xcb\xa5\x63\x12\x36\x3d\x9f\xd1\x9b\xcd\x5f\xff\x35\xbd\xf5\xfe\xf1\x9f\x7f\x17\x9f\x7f\x28\xe3\xeb\x2b\xcb\xb2\xf3\xc9\xc5\xcd\xcd\x2d\xc6\xef\xaf\xae\x3f\x7c\x8e\xfe\xf7\xe1\xfd\xc5\xcd\x6d\xe6\x9d\x2d\x1d\xc2\xb5\x32\x46\x69\x8c\x51\x2e\x1d\x26\x95\x2c\x53\x95\x9b\x6f\xde\x48\x6e\xc0\xb5\x65\x06\x6b\xb4\xf5\x3e\xb2\x58\xcd\x30\x2e\x6a\x8e\xc7\xfa\xf2\x8c\x65\x16\xb9\x97\xb2\xed\xe6\xba\x13\x0d\xd7\x98\x59\x62\x34\x7f\x58\xb4\x5a\x2c\x52\xd2\xb2\x0d\x18\x95\x82\xcb\x55\xea\x5d\x46\x67\xd3\xd3\x8b\xd9\xec\x32\x72\x6f\xcd\xf8\xf6\x16\x5e\xe3\x70\x6c\x89\x96\x4b\x8e\x95\x9b\x41\x73\x8b\x56\xc0\xea\xeb\x57\x0b\x69\x26\x98\x05\xe2\x64\x2c\x86\xfa\xab\x43\xdc\xfb\xfb\x85\xd7\x58\x6c\xa3\xd9\xeb\x84\xf3\x22\x50\x61\xd9\xf6\x43\x2c\x08\x86\x4b\x47\x84\x15\x5f\xc1\x8c\xa9\xfb\x74\xa3\x59\x96\x81\x26\x55\xbf\x40\x53\x47\x70\x77\xfd\x6a\x5e\xc7\x5c\xa3\x8c\xbb\x78\x6b\xb3\x5a\x78\xd5\xdf\x23\x80\xee\x78\xaf\x5f\x4b\xd5\x31\x74\xbb\xf4\xbe\xee\x7b\xce\x94\x41\x8b\x4a\xce\x49\x84\x77\x10\xfe\x7d\x1f\x4d\x00\xe3\xc4\xce\xc9\xc4\xf7\x8b\xa4\x87\xd5\x97\xaa\x81\x36\x3d\x28\x60\x7c\x1d\x6b\x95\xcb\x70\x4e\x02\xc1\xf8\xba\x87\x87\x68\x32\xc1\xca\x39\x89\x04\xdc\xf5\xb0\xdb\xdc\x58\x8c\x4a\xba\xbd\xc9\x73\xc2\x41\x5a\xd0\x3d\x2b\x26\x30\x96\x14\x2d\xa4\x66\xc4\xe2\x0b\x45\x19\xc2\xdd\x9c\x5c\x5e\x5e\xf6\xa0\x5a\x1d\x14\x68\xcb\x39\x49\x30\x0c\x41\xf6\x0c\x54\xc6\x78\x8d\xfa\x3d\xc0\x6a\x26\xdb\xf3\x7a\xf0\x42\x7c\x43\x7c\xf7\xdc\x9c\xb4\x13\xeb\x11\x11\x28\x81\x75\x69\xdd\xf7\x24\xd9\x46\x49\x5f\x92\x2e\xbd\xd6\xe4\x05\xa6\xd5\x03\xc7\xa4\x1d\xa3\x3a\x19\xb7\xe9\xb2\x1e\x60\x38\x3c\xb1\x4f\xb6\x8a\xd7\x3e\xd3\x9d\x8e\x28\x2b\x57\x34\x10\xea\x40\xeb\x87\x00\xd3\x20\x98\xc5\x02\x86\xe3\xe8\xc2\xcf\xfa\xa1\xd0\x46\x5f\x0f\x1a\x64\x56\xdd\xae\x1e\xbb\x40\xdd\x51\x83\x5f\x50\xc6\x73\x12\x28\x1d\x82\xa6\x81\xea\xaf\xb1\xdb\xc2\xe3\xdc\x59\x60\x94\xc8\xed\x08\xf7\xd9\xd9\x28\xf7\x01\x28\x65\x3a\x46\x39\x27\x17\x07\x48\xc3\xb2\x46\x88\x51\x02\x43\xf2\x97\x28\x8a\x06\x8d\xa8\x66\x21\xe6\x66\x4e\xce\xfd\x97\xfd\xbb\x21\x31\x65\x0d\xed\xdd\xf1\x4c\xdc\xa9\x21\x3c\x0f\x90\xd3\x00\xbe\x20\xe8\x57\xbe\x7b\x7e\x42\xfc\x13\x52\xb7\x93\xd7\x04\x65\x54\xe5\xc7\xfe\x0e\xb7\xab\x71\x25\x94\x9e\xd7\x74\x9a\x70\xca\x98\x06\x69\xc7\xfa\x47\xa8\x35\x97\x36\xa1\x3c\x41\x11\xbe\x9a\xbc\xee\x4b\xb7\xdb\x02\x0d\xa1\x56\x87\xfa\xee\xd9\xb9\xf9\x36\xb7\xd3\xa3\xdc\x9e\x7e\xa3\xd7\xd3\x03\xaf\x1d\x67\x93\x31\x8e\x6f\xd6\x50\x46\x9a\xa5\x60\xc8\xd8\x65\xf2\x5f\xf6\xbf\x90\xf6\xee\x46\x4a\xa7\x73\xa2\x95\x65\x16\x5e\xf9\x21\xc4\xaf\x7b\x2a\xdd\xef\x0f\x27\xfe\xb1\xce\x4e\x67\x4f\xb8\xbb\x6f\xf3\x4b\x37\xa9\x74\x73\x59\x95\x26\x41\x93\xa6\xa1\x75\x12\x21\xb9\x34\x20\x80\x5b\x56\x3d\x5d\x5b\x24\x64\x7a\xdd\xf6\x1b\x1d\x20\x1c\xcb\x8f\x5b\xb3\x40\x33\x19\x0e\xe5\xc8\xd6\x4e\xb2\xa2\xce\x01\x44\x2a\x9a\xa8\x02\x74\xdf\xb8\x9e\xc0\xda\x7a\x65\x08\xad\x2d\x92\x59\xeb\xb1\x29\x07\x56\xd7\xd3\xd3\xb7\xb9\x4d\x16\x5e\x32\x1b\xf2\xe8\xb1\x3e\xa9\x91\x9c\x7d\x48\x94\x15\x34\xb0\xd2\xa9\x2b\x88\x76\x9b\x56\x0e\xf2\x36\x19\x93\x55\x25\x53\x35\x7f\x0e\x26\x8f\xb3\x3d\x18\x1f\x4a\x21\x59\xb1\xc7\x39\x05\x99\x3f\xa5\x8c\x80\xc8\x0e\x6e\x6c\xe8\x60\x2c\xdc\x59\xda\x24\xf2\x51\x99\x76\x42\x7a\x31\xda\x24\x0f\xea\x02\x52\xc2\x5a\x19\x2e\x54\x1e\x7a\x49\x19\x6a\x46\xb9\x40\x90\x83\x0b\xef\x9d\x4d\xcb\x00\xb9\x1a\x3c\xfe\xbd\x09\xd8\x5a\x47\xac\x89\x4a\x43\x22\xb6\x2b\xa9\x22\x46\x1b\x42\x0e\x61\x1a\x19\x6d\x6a\x8a\xa5\x63\x75\x0e\x55\x2d\x8a\x8f\x71\x19\x13\x90\x0c\x06\x1a\x19\x0b\xb6\x23\x02\x50\x57\x19\xe9\x58\x41\x9e\x16\x81\x71\xae\xf2\xea\xa0\xdf\x36\x9d\x3f\x4e\x76\xac\x90\xed\xd6\xea\xdb\x72\xb0\xae\xd4\xb7\x96\x91\x52\x16\xf4\x4e\x99\x66\x94\x5a\x3a\x1d\x7b\x56\xb4\xda\x10\x01\x05\x88\xc7\x22\x97\x2b\x41\x27\xd3\x26\x1e\x37\x09\x5a\x18\xbd\x9b\x0f\x31\x11\x56\x4f\xd9\xaf\xbf\x6c\x3f\x57\xd7\x84\xab\xac\x74\xda\xeb\x37\xaa\xf1\xf4\xf4\xff\xa5\xa9\x6a\x58\x12\x94\xe4\x7a\x7a\x7a\x84\xa6\xdd\x85\xbb\x54\x63\xcd\x4a\x3a\xf1\xfd\x91\x17\xb0\x7d\xde\xf6\x4c\x5b\x25\x33\x8d\x05\xe3\xa5\xb3\xfa\xd8\x74\x46\x94\xdc\x79\xc9\xe8\xa4\xb3\xe8\xa5\xef\x93\x9c\x56\x95\x3c\x35\x89\x46\xb9\xa6\xbe\xb3\xfa\xed\xa7\x9f\x9f\xf2\x32\xcc\xc5\x82\x4e\x8d\xb3\xfa\x54\x35\x43\xef\x6c\xef\x24\xf7\x43\xa7\x89\x81\xdd\x70\xfb\x5f\xdb\xc2\xdb\xfe\x6e\xf1\x7b\x00\x00\x00\xff\xff\xa6\x1d\x0b\x3d\xc9\x10\x00\x00")

func ab_viewsLayoutTplHtmlBytes() ([]byte, error) {
	return bindataRead(
		_ab_viewsLayoutTplHtml,
		"ab_views/layout.tpl.html",
	)
}

func ab_viewsLayoutTplHtml() (*asset, error) {
	bytes, err := ab_viewsLayoutTplHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ab_views/layout.tpl.html", size: 4297, mode: os.FileMode(438), modTime: time.Unix(1651854840, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _ab_viewsLoginTplHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x54\xcd\x6e\xdb\x30\x0c\x3e\xa7\x40\xdf\x81\xd0\xa5\x27\xc5\xfd\xd9\x65\x80\x6d\x6c\xd8\x76\x28\x50\x74\xc5\x36\xec\x3a\x28\x12\x1d\x6b\xd5\x8f\xa1\x9f\x34\x86\x61\x60\xcf\xb2\x47\xdb\x93\x0c\x4a\x1c\x3b\x69\xd3\xa2\xc3\x2e\x89\x4c\x7e\x24\xbf\x4f\x22\xd9\x75\x02\x2b\x69\x10\x48\xc3\x96\x18\x64\x50\x48\xfa\xfe\xc6\x2e\xe1\xda\x00\x85\xdb\xcb\xab\xf7\x31\xd4\x5d\x87\x46\xf4\xfd\xe9\xc9\xe9\xc9\x14\xc0\xad\x09\x68\x02\x49\xf6\xdc\x23\x0f\xd2\x1a\xe0\x8a\x79\x5f\x90\xe1\x93\x94\xa7\x27\x00\x00\xb9\x90\xab\x9d\xab\x46\x67\xa1\x8a\x4a\x79\xee\x10\x9f\x85\xd0\x85\x15\xed\xce\xf9\x18\x30\x94\x86\x48\x39\x9a\x80\x0e\x74\xa0\x6f\x12\x78\x36\x9b\xe5\x95\x75\x7a\x07\x8c\xb4\x52\xb8\xa6\xdc\xaa\xa8\x0d\x44\xfa\x33\xfa\x20\xab\x76\x08\x23\xc0\x36\x34\x0b\xd2\x75\xda\x46\x13\x1a\x16\x6a\x14\x40\x94\x5d\x4a\x43\xfa\x9e\x80\xc6\x50\x5b\x51\x90\xbb\xcf\x5f\xbf\x0d\x05\x66\x5d\xf7\x20\x43\x0d\x73\x74\xce\xba\xa4\x3e\x19\x67\xfb\xfc\x82\x65\x3e\xc0\xe6\x97\x52\xc1\xcc\x32\x51\x5c\xd3\xf3\x5d\x86\x43\xf4\x22\x18\xca\x95\xf5\x48\x20\xb4\x0d\x16\x64\x11\x43\xb0\x86\x80\x35\x5c\x49\x7e\x5f\x90\x50\x4b\x3f\x6f\x98\x43\x13\x6e\xad\xc0\xb9\x0f\xad\xc2\xb9\x90\xbe\x51\xac\x85\x02\xce\x8c\x35\x78\x46\xca\x3c\x13\x72\x35\xd5\x68\x76\x15\xb4\xa3\x57\xa4\xec\xba\x79\xdf\xe7\x59\xb3\x03\x1c\xa0\xf3\x85\x83\x6c\x14\x38\x3c\xf7\xbe\x5a\xee\x5d\xf5\x23\xd8\x7b\x34\x93\x64\x69\x9a\x18\x06\xd2\xb5\x14\x02\x0d\x01\xc3\x34\x16\x64\x42\x13\x58\x31\x15\x31\xdd\xf1\x3c\xdd\xe8\x8b\x45\x1c\x0a\xe9\x5e\x93\x7f\x03\x7c\x55\xea\x59\xae\xd8\x02\x15\x54\xd6\x15\x04\x35\x93\x8a\x4c\xdd\x31\xf4\x41\xf9\x29\xd9\xf3\x6c\x83\x2c\x8f\x55\x0f\xb8\x0e\x63\x5c\xea\x30\x9a\x7a\xd0\x59\x35\xf5\x60\xa4\xce\x46\x23\xa8\x5a\x42\x43\x2f\x40\x2f\xe8\x25\xe8\x36\x9d\xd8\x9a\x3e\xd0\xb5\xdf\x71\x1f\x48\x34\x8a\x71\xac\xad\x12\x98\x88\xad\x99\x6e\x14\xbe\x1b\xfe\xe7\xdc\xea\x7d\x75\x8d\x93\x9a\xb9\xf6\xfa\xe3\xf7\x64\xea\xfb\xb1\x91\xf6\xc5\x35\xcc\xfb\x07\xeb\xc4\x11\x7d\x77\x83\xeb\x25\x89\x4f\xc2\xff\x53\xe6\x94\xef\x40\xe9\x68\x9e\x3a\x6f\xd3\xee\x03\x0b\x1f\x17\x5a\x86\x23\x12\x6e\xd2\x4c\xe6\xd9\x16\x5c\x1e\x19\xba\xed\xac\x03\xb7\x8a\x5e\x5c\x42\x7a\x30\xba\x74\xac\xa5\x6f\xcf\xcf\x61\x4a\x33\x0e\x07\x1b\x87\xf5\x00\xa9\xd7\xf4\x02\x22\x44\xfa\x81\x40\xed\xb0\x7a\xb2\x1b\x1c\x72\xbb\x42\x97\xb6\x43\xf9\x65\x7b\xce\x33\x76\x24\x6f\xba\x9d\xc7\x2c\x36\xdb\xc8\xd7\x4e\x9a\xfb\xb4\x0d\xfe\xfc\xfa\x7d\x3c\xf6\x9f\x39\x2d\xa5\x0f\x23\xa9\xed\xc7\x94\x79\x6f\xd0\xf3\x2c\xbd\xea\xfe\x5a\x1d\x7c\xcf\x9d\xf3\x6c\xd8\xe5\x65\xda\xfd\x9b\xb9\xfa\x1b\x00\x00\xff\xff\x73\xa1\xe7\x43\x34\x06\x00\x00")

func ab_viewsLoginTplHtmlBytes() ([]byte, error) {
	return bindataRead(
		_ab_viewsLoginTplHtml,
		"ab_views/login.tpl.html",
	)
}

func ab_viewsLoginTplHtml() (*asset, error) {
	bytes, err := ab_viewsLoginTplHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ab_views/login.tpl.html", size: 1588, mode: os.FileMode(438), modTime: time.Unix(1651866639, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _ab_viewsRecover_endTplHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\xcd\x6e\xe3\x36\x10\x3e\x7b\x81\xbc\xc3\x94\x97\x4d\x0e\x94\x9c\x6c\x7b\x28\x20\x19\x68\x17\xbd\x15\xe9\x62\xdb\x5b\x51\x2c\x68\x72\x64\xb1\xa1\x48\x81\x3f\xfe\x81\x20\xa0\xcf\xd2\x47\xeb\x93\x14\x94\x28\xdb\xf1\x3a\x4a\xd1\x3d\xb4\x39\x28\x92\xe7\x9b\xff\xf9\x38\xec\x3a\x81\x95\xd4\x08\xa4\x65\x1b\xf4\xd2\x2b\x24\x7d\xff\x11\xb9\xd9\xa2\x05\x0a\x8f\x0f\xef\xbe\x0b\xbe\xee\x3a\xd4\xa2\xef\x6f\xde\xdc\xbc\x39\x69\x70\xa3\x3d\x6a\x4f\xe2\xef\x85\xe3\x56\xb6\x7e\xb5\x93\x5a\x98\x5d\x66\xb4\x32\x4c\x94\x55\xd0\xdc\x4b\xa3\x6f\xef\x3a\x59\xdd\x7e\x25\x0c\x0f\x0d\x6a\x9f\x6d\xd0\xff\xa0\x30\xbe\xba\xef\x0f\x8f\xac\xc1\x5b\xe2\xcd\x13\x6a\x72\xf7\xeb\xf2\xb7\x6c\xcb\x54\xc0\xbb\x64\x49\x19\xce\xa2\x89\xac\xb6\x58\x95\x24\x27\x7d\x91\x27\x5f\xd1\x2b\x0e\xf6\x81\x2b\xe6\x5c\x49\xd2\x27\x59\xdd\xbc\x01\x00\x28\x84\xdc\x4e\xa2\x1a\xad\x81\x2a\x28\xe5\xb8\x45\x7c\x11\x42\xd7\x46\x1c\x26\xe1\x25\x20\x25\x0c\x81\x72\xd4\x1e\x2d\x34\x9e\x7e\x1d\xc1\x8b\xc5\xa2\xa8\x8c\x6d\x26\x60\xa0\x95\xc2\x3d\xe5\x46\x85\x46\x43\xa0\xbf\x07\xe7\x65\x75\x48\x6a\x04\xd8\x10\x66\x49\xba\xae\x31\x41\xfb\x96\xf9\x1a\x05\x10\x3b\x96\x3d\x47\x2d\x48\xdf\x13\x68\xd0\xd7\x46\x94\xe4\xc3\x4f\x3f\xff\x92\xdc\x2c\xba\x6e\x27\x7d\x0d\x19\x5a\x6b\xac\x8b\xa5\x87\x2b\x7f\x09\x75\x2b\xb5\xc0\x3d\x64\x40\xc8\xdd\x4b\xd0\x11\x6e\x99\xde\x20\x64\x73\xa0\xf3\x4a\x78\xc3\x9c\x87\xe1\x49\xa9\x88\xba\x16\x9a\x3d\x5d\x9e\x57\xee\x35\x1b\x6b\xaf\x29\x57\xc6\x21\x01\x7f\x68\xb1\x24\xeb\xe0\xbd\xd1\x04\x8c\xe6\x4a\xf2\xa7\x92\xf8\x5a\xba\xac\x65\x16\xb5\x7f\x34\x02\x33\xe7\x0f\x0a\x33\x21\x5d\xab\xd8\x01\x4a\x78\xab\x8d\xc6\xb7\x64\x55\xe4\x42\x6e\x5f\xf3\xdc\x4e\x7e\x1b\x4b\xdf\x91\x55\xd7\x65\x7d\x5f\xe4\xed\x8c\xda\x6b\x66\x8b\xb5\x85\x7c\x46\x7e\x24\xcd\xac\x70\x6c\x2a\x6a\x01\xf4\x1a\xb6\x90\xba\x0d\x3e\x55\xa8\x96\x42\xa0\x26\xa0\x59\x83\x65\xa2\x0c\x0c\x74\x89\xb3\x94\xa5\xf9\xf9\x34\x08\xe2\x00\xe5\x17\x43\xc3\x9d\xad\x26\xe9\x28\x59\xcc\xd8\x3f\xa1\xcf\x9d\x3c\xb7\xfb\x42\x86\x85\x62\x6b\x54\x50\x19\x5b\x92\x96\x39\xb7\x33\x56\x90\x13\x3b\x12\x0f\x56\x1f\x92\xa8\xc8\x07\xfc\x95\x5a\x3e\x0b\xef\x33\x4b\x91\x73\x34\xb2\xd2\x1a\x75\x62\x65\xa0\xd6\x04\x2d\xa8\xda\x40\x4b\xef\xa1\x59\xd3\x07\x68\xd8\x9e\xee\xe8\xde\x4d\xb9\x9d\x4c\xb5\x8a\x71\xac\x8d\x12\xf8\x2c\xd6\x63\xc2\x63\xe5\x5a\x8b\x0e\xed\x16\xfb\xfe\x48\xc0\x86\x49\x15\x3f\xb3\xf8\x18\xea\x90\xfe\x5d\x23\xc1\x3f\xa5\x6d\xe2\xe1\x14\xc7\x2c\x1f\x5d\xcb\x8e\x27\x9f\xc7\xbd\xa7\x16\x05\xfd\x66\xb9\x3c\x0e\x77\x04\xfc\xcb\xf9\x7d\xb1\xb3\x73\xa3\x7a\xd6\x74\x6e\x74\x25\x6d\xf3\x69\xa6\xf9\xef\x47\x08\xfc\x77\x43\xf0\x79\x90\xd7\x87\xe1\xcb\xfb\x79\xe9\xe9\x7f\xdd\xd7\xf1\x5c\x18\x4f\xe3\x54\x74\x17\xd6\x8d\xf4\x57\x9a\x98\x6e\x0a\x45\x3e\xc2\x57\x93\xf6\xd9\x39\x3f\x2e\x43\xe0\x46\xd1\xfb\x07\x18\x12\xda\x58\x76\xa0\xdf\x2e\x97\x70\x32\x94\x14\x17\x05\x7b\x96\xfa\x11\xd9\xec\xe9\x3d\x04\x08\xf4\x3d\x81\xf1\x2a\x70\xb1\x3c\x95\xd9\x48\x1d\xd7\xe6\xea\x47\xb3\x01\xa9\x8b\x9c\xcd\xd5\xe8\xe8\x26\x4e\xc7\x65\x50\xc3\xf6\x76\xb5\x95\xfa\x29\xee\xb4\xbf\xfe\xf8\x73\xb4\xf6\x85\x21\x5a\xdc\x48\x17\xb3\x8d\x51\x7e\x4c\x1f\x27\xcb\xd3\xbe\x19\x5e\xe3\x54\x9f\x5f\x43\xce\x76\xd1\xb5\xf7\x22\x4f\x77\x9f\x55\xbc\xa1\x0d\x3d\xfe\x3b\x00\x00\xff\xff\x20\xd5\x4b\x03\xdb\x09\x00\x00")

func ab_viewsRecover_endTplHtmlBytes() ([]byte, error) {
	return bindataRead(
		_ab_viewsRecover_endTplHtml,
		"ab_views/recover_end.tpl.html",
	)
}

func ab_viewsRecover_endTplHtml() (*asset, error) {
	bytes, err := ab_viewsRecover_endTplHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ab_views/recover_end.tpl.html", size: 2523, mode: os.FileMode(438), modTime: time.Unix(1651866629, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _ab_viewsRecover_startTplHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\xcd\x6e\xdb\x38\x10\x3e\x3b\x40\xde\x61\xc0\x4b\x4e\xb4\xf2\xb3\x97\x05\x24\x61\x17\x8b\xbd\x15\x69\x91\xf6\x5e\xd0\xe4\xc8\x62\xc3\x1f\x81\x1c\x3a\x36\x04\x01\x7d\x96\x3e\x5a\x9f\xa4\xa0\x4d\x5b\x4e\xea\x1c\x7a\xb1\x45\xf2\x9b\x99\xef\x9b\xf9\xc8\x71\x54\xd8\x69\x87\xc0\x06\xb1\x46\xd2\x64\x90\x4d\xd3\x13\x4a\xbf\xc1\x00\x1c\x1e\xef\x1f\xfe\x4d\xd4\x8f\x23\x3a\x35\x4d\xd7\x57\xd7\x57\x73\x84\xf4\x8e\xd0\x11\xcb\xfb\x75\x44\x49\xda\x3b\x90\x46\xc4\xd8\xb0\xb2\x64\xed\xf5\x15\x00\x40\xad\xf4\xe6\x78\xd4\x63\xf0\xd0\x25\x63\xa2\x0c\x88\xef\x42\xf8\xca\xab\xdd\xf1\xf0\x2d\xa0\x94\x86\xc4\x25\x3a\xc2\x00\x96\xf8\x5f\x19\xbc\x58\x2c\xea\xce\x07\x7b\x04\x26\xde\x19\xdc\x72\xe9\x4d\xb2\x0e\x12\xff\x96\x22\xe9\x6e\x57\xc2\x18\x88\x3d\xcd\x86\x8d\xa3\xf5\xc9\xd1\x20\xa8\x47\x05\x2c\x1c\x1a\xc0\xa6\x89\x81\x45\xea\xbd\x6a\xd8\xa7\x8f\x9f\xbf\x94\x12\x8b\x71\x7c\xd1\xd4\xc3\x12\x43\xf0\x21\xeb\xcf\x9b\x8b\x73\x86\xe4\x45\x24\xd8\xff\x72\xae\x84\x5b\x67\x92\x5b\x7e\x7b\xcc\xf0\x1a\xbd\x22\xc7\xa5\xf1\x11\x19\xd0\x6e\xc0\x86\xad\x12\x91\x77\x0c\xbc\x93\x46\xcb\xe7\x86\x51\xaf\xe3\x72\x10\x01\x1d\x3d\x7a\x85\xcb\x48\x3b\x83\x4b\xa5\xe3\x60\xc4\x0e\x1a\xb8\x71\xde\xe1\x0d\x6b\xeb\x4a\xe9\xcd\x5c\x63\x38\x56\xb0\x81\x3f\xb0\x76\x1c\x97\xd3\x54\x57\xc3\x11\xf0\x0a\x5d\xaf\x02\x54\x27\x81\x65\xe0\xe7\x6a\x65\x0c\xdd\x57\xf2\xcf\xe8\x66\xc9\xda\x0d\x89\x0a\xe9\x5e\x2b\x85\x8e\x81\x13\x16\x1b\x36\xa3\x19\x6c\x84\x49\x98\xbb\xbc\xcc\x1d\xbd\x58\x64\x51\x1b\xb1\x42\x03\x9d\x0f\x0d\x43\x2b\xb4\x61\xf3\x10\xcb\xb8\xda\xff\xf3\x7e\x5d\xed\x91\xed\x25\x0a\x84\x5b\x3a\xc5\x65\x23\xf0\x6c\x95\xe0\xcd\x6c\x95\xc4\x83\x4f\x4e\x71\xb3\x86\x81\xdf\x81\x5d\xf1\x7b\xb0\xbb\xfc\x25\xb6\xfc\x85\x6f\xe3\x51\x40\x21\x31\x18\x21\xb1\xf7\x46\x61\x26\xb6\x15\x76\x30\xf8\x4f\xf9\x5f\x4a\x6f\xd9\xdc\xbf\xfd\xd0\x0a\x93\x98\x56\x56\xd3\x05\x0d\xe5\x72\xd5\xd5\x01\xde\x5e\x30\xcf\xc1\xb5\x20\xbd\xe1\x77\xf7\x90\x35\xf1\x75\x10\x3b\xfe\xf7\xed\x2d\xcc\x89\x4e\x43\x16\x27\xd3\xbd\x42\xda\x2d\xbf\x83\x04\x89\xff\xc7\xa0\x0f\xd8\xfd\xe6\x72\xe3\xd7\xda\x65\x8f\xb7\x1f\xfc\x1a\xb4\xab\x2b\x71\x21\x69\x6e\xd2\x5b\x0a\xfb\x4b\x15\xfb\xa0\xdd\x73\xb6\xf4\xcf\xef\x3f\x2e\xc7\xfe\x21\xa1\x80\x6b\x1d\xe9\x70\xef\xda\xa7\xb2\x98\x33\x9f\xb9\xb5\xae\xf2\x70\xcf\x5f\x87\x72\xf6\xde\x77\x5d\x95\x27\xa9\xcd\x4f\xd8\xde\x77\xbf\x02\x00\x00\xff\xff\x66\x2f\x99\x58\xfc\x04\x00\x00")

func ab_viewsRecover_startTplHtmlBytes() ([]byte, error) {
	return bindataRead(
		_ab_viewsRecover_startTplHtml,
		"ab_views/recover_start.tpl.html",
	)
}

func ab_viewsRecover_startTplHtml() (*asset, error) {
	bytes, err := ab_viewsRecover_startTplHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ab_views/recover_start.tpl.html", size: 1276, mode: os.FileMode(438), modTime: time.Unix(1651866617, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _ab_viewsRecovery2faTplHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func ab_viewsRecovery2faTplHtmlBytes() ([]byte, error) {
	return bindataRead(
		_ab_viewsRecovery2faTplHtml,
		"ab_views/recovery2fa.tpl.html",
	)
}

func ab_viewsRecovery2faTplHtml() (*asset, error) {
	bytes, err := ab_viewsRecovery2faTplHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ab_views/recovery2fa.tpl.html", size: 0, mode: os.FileMode(438), modTime: time.Unix(1651482396, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _ab_viewsRegisterTplHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x56\xcd\x6e\xe3\x36\x10\x3e\x3b\x40\xde\x61\xc0\xcb\xb6\x07\x4a\x4e\xb6\x3d\x14\x90\x84\x16\x8b\x5e\x8a\x22\x5d\xec\xf6\xbe\xa0\xc5\x91\xc5\x86\x3f\x02\x7f\x1c\x1b\x82\x80\x3e\x4b\x1f\xad\x4f\x52\x50\xa6\x24\xc7\xf1\x06\x49\x0f\xd9\x0b\x2d\x92\xdf\xcc\x7c\x9c\x6f\x68\x4e\xdf\x73\x6c\x84\x46\x20\x1d\xdb\xa2\x17\x5e\x22\x19\x86\x4f\xb8\x15\xce\xa3\x05\x0a\x77\xb7\xef\x7f\x09\xbe\xed\x7b\xd4\x7c\x18\xae\xaf\xae\xaf\x16\x93\xda\x68\x8f\xda\x93\xb8\x5e\x38\xac\xbd\x30\x1a\x6a\xc9\x9c\x2b\x49\x9a\x92\xea\xfa\x0a\x00\xa0\xe0\x62\x37\x6d\xb5\x68\x0d\x34\x41\x4a\x57\x5b\xc4\xaf\x42\xe8\xc6\xf0\xc3\xb4\x79\x0e\x48\xa1\x21\xd0\x1a\x75\x64\xaa\x3c\xfd\x21\x82\x57\xab\x55\xd1\x18\xab\x26\x60\xa0\x8d\xc4\x3d\xad\x8d\x0c\x4a\x43\xa0\x7f\x05\xe7\x45\x73\x48\x66\x04\xd8\x48\xb3\x24\x7d\xaf\x4c\xd0\xbe\x63\xbe\x45\x0e\xc4\xa6\x0c\x90\x61\x20\xa0\xd0\xb7\x86\x97\xe4\xe3\x1f\x9f\xff\x4c\x31\x56\x7d\xff\x20\x7c\x0b\x19\x5a\x6b\x6c\x4c\xc0\xea\x64\xf5\x3b\xa1\x39\xee\x21\x03\x42\xbe\x9f\xf7\x56\x7d\x6f\x99\xde\x22\x64\xcb\xd2\xea\xf4\x4c\xde\x30\xe7\x61\x1c\x29\xe5\x11\x6a\x41\xed\xe9\x7a\x0a\x79\x8e\xdf\x78\x4d\x6b\x69\x1c\x12\xf0\x87\x0e\x4b\xb2\x09\xde\x1b\x4d\xc0\xe8\x5a\x8a\xfa\xbe\x24\xbe\x15\x2e\xeb\x98\x45\xed\xef\x0c\xc7\xcc\xf9\x83\xc4\x8c\x0b\xd7\x49\x76\x80\x12\xde\x69\xa3\xf1\x1d\xa9\x8a\x9c\x8b\xdd\x69\x94\x6e\x8a\xa1\x2c\x7d\x4f\xaa\xbe\xcf\x86\xa1\xc8\xbb\x05\x72\x66\x51\x6c\x2c\xe4\xd5\x72\xd0\x54\x2c\x4f\x67\x67\x93\x63\x0e\x6b\x67\x9b\x2f\xde\xdc\xa3\x9e\x8d\x0a\xa1\xbb\xe0\xd3\xb9\x5a\xc1\x39\x6a\x02\x9a\x29\x2c\xc9\x82\x26\xb0\x63\x32\x60\x14\x2f\x8b\x3a\xe5\xd5\x33\x41\x2c\x72\x61\x5f\xe2\x7f\x04\xbe\xc8\x75\x21\xd9\x06\x25\x34\xc6\x96\x04\x15\x13\x92\x2c\x55\x97\xea\xab\xba\x63\x0a\x8b\x7c\x04\x56\x97\x62\x7b\xdc\xfb\xd9\x2c\x16\x2e\x8d\xa5\x6d\x8d\x5c\x4a\x3b\x50\x6b\x82\xe6\x54\x6e\xa1\xa3\x37\xa0\x36\xf4\x16\x14\xdb\xd3\x07\xba\x77\x13\xe9\x38\x12\xe8\x24\xab\xb1\x35\x92\xa3\x2d\xc9\x6f\xa6\xd5\xf0\x59\x09\xdf\xce\x05\xf4\x12\xc2\xbf\xc6\xf5\x37\x60\x9c\xe2\x3f\xa2\x8c\x7b\xa6\x3a\x89\x3f\xa7\xdf\xac\x36\xea\x44\x88\xa3\x8e\x9d\x45\x87\x76\x87\xc3\x30\x5f\xc1\xe8\x29\x4e\xb3\x38\x8c\xfa\xa4\x9f\xf9\xe0\x8f\x6e\xab\xbb\x70\x25\x93\x8f\xa5\xa0\x5d\xc7\xe6\xff\xb2\x78\x62\x6a\x91\xd3\x1f\xd7\xeb\xf9\x32\x44\xc0\x2b\x2e\x00\xd0\xa5\xf6\x4e\x54\xe8\x98\x73\x0f\xc6\xf2\x0b\x42\x7c\x4c\x5b\xcf\x69\xf1\xc4\xfc\xff\xeb\xb1\xb8\x7a\x24\xc9\xb2\xfc\x26\x3a\x4c\xe1\xbe\x81\x14\xb5\xd1\x8d\xb0\xea\xcb\x33\x92\x7c\x38\x42\xe0\x8d\xa5\x79\xca\xec\xb2\x44\x2f\xce\xf2\xb9\xc3\xb7\xca\xf6\xf1\x81\x4a\x09\x72\x61\xa3\x84\xbf\x90\xe5\xa9\xfb\x28\xf2\x23\x7e\x4e\xef\xc9\xdb\x77\x7c\xd6\xa1\x36\x92\xde\xdc\xc2\xc8\x73\x6b\xd9\x81\xfe\xb4\x5e\xc3\xe2\x69\xa2\x55\xb0\x47\x27\x9a\x91\x6a\x4f\x6f\x20\x40\xa0\x1f\x08\xb4\x16\x9b\x0b\x6d\x40\x6d\x76\xc7\x2e\xa0\xfa\x74\xfc\x2e\x72\x76\xc1\x6f\xd4\xee\x9c\xc5\xd8\x78\xb8\xd6\x0a\x7d\x1f\x1f\xf1\x7f\xff\xfe\xe7\xb2\xed\x2b\x39\x49\xb3\x15\x7a\x64\xf4\xbb\xd9\x82\xd0\x8b\xd3\x93\x47\xb9\xc8\x63\xb9\x9d\x36\x4f\x69\xef\x6b\xdf\x45\x9e\x3a\xb6\x2a\x76\x78\xa3\x8a\xff\x05\x00\x00\xff\xff\x3b\x4f\x86\xf6\x1c\x0a\x00\x00")

func ab_viewsRegisterTplHtmlBytes() ([]byte, error) {
	return bindataRead(
		_ab_viewsRegisterTplHtml,
		"ab_views/register.tpl.html",
	)
}

func ab_viewsRegisterTplHtml() (*asset, error) {
	bytes, err := ab_viewsRegisterTplHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ab_views/register.tpl.html", size: 2588, mode: os.FileMode(438), modTime: time.Unix(1651866604, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"ab_views/layout.tpl.html":        ab_viewsLayoutTplHtml,
	"ab_views/login.tpl.html":         ab_viewsLoginTplHtml,
	"ab_views/recover_end.tpl.html":   ab_viewsRecover_endTplHtml,
	"ab_views/recover_start.tpl.html": ab_viewsRecover_startTplHtml,
	"ab_views/recovery2fa.tpl.html":   ab_viewsRecovery2faTplHtml,
	"ab_views/register.tpl.html":      ab_viewsRegisterTplHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"ab_views": &bintree{nil, map[string]*bintree{
		"layout.tpl.html":        &bintree{ab_viewsLayoutTplHtml, map[string]*bintree{}},
		"login.tpl.html":         &bintree{ab_viewsLoginTplHtml, map[string]*bintree{}},
		"recover_end.tpl.html":   &bintree{ab_viewsRecover_endTplHtml, map[string]*bintree{}},
		"recover_start.tpl.html": &bintree{ab_viewsRecover_startTplHtml, map[string]*bintree{}},
		"recovery2fa.tpl.html":   &bintree{ab_viewsRecovery2faTplHtml, map[string]*bintree{}},
		"register.tpl.html":      &bintree{ab_viewsRegisterTplHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
