// Code generated for package main by go-bindata DO NOT EDIT. (@generated)
// sources:
// ab_views/layout.tpl.html
// ab_views/login.tpl.html
// ab_views/recover_end.tpl.html
// ab_views/recover_start.tpl.html
// ab_views/recovery2fa.tpl.html
// ab_views/register.tpl.html
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _ab_viewsLayoutTplHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x58\xd1\x6e\xdb\x36\x17\xbe\x2f\xd0\x77\x60\xf5\xa3\x40\x8b\x3f\x94\x64\x27\xf1\x12\xcf\x0a\xda\x65\xed\x56\x0c\xc8\x3a\xa0\x29\xb6\xdd\xd1\xe4\x91\x74\x12\x8a\xd4\x48\x4a\x8e\x5b\x04\xd8\xb3\xec\x6e\xaf\xb1\x47\xd9\x93\x0c\x92\x2c\x47\x96\xa5\x34\xd9\x6e\x42\x52\xdf\xe1\xe1\x47\x7e\x87\x3c\x27\x5e\x3c\xfb\xf6\xc7\xf3\x0f\xbf\xbc\x7f\x43\x52\x97\xc9\xb3\xa7\x4f\x16\x55\x4b\x24\x53\x49\xe4\x81\xf2\xce\x9e\x3e\x21\x84\x90\x45\x0a\x4c\x6c\xfa\xf5\x38\x03\xc7\x08\x4f\x99\xb1\xe0\x22\xef\xf2\xc3\x5b\x7a\xe2\xed\xe1\xa9\x73\x39\x85\xdf\x0a\x2c\x23\xef\x67\x7a\xf9\x9a\x9e\xeb\x2c\x67\x0e\x97\x12\x3c\xc2\xb5\x72\xa0\x5c\xe4\xbd\x7b\x13\x81\x48\x60\x7f\xba\x62\x19\x44\x5e\x89\xb0\xca\xb5\x71\x9d\x19\x2b\x14\x2e\x8d\x04\x94\xc8\x81\xd6\x83\x03\x82\x0a\x1d\x32\x49\x2d\x67\x12\xa2\x89\x1f\xee\xf8\x93\xa8\xae\x89\x01\x19\x79\xd6\xad\x25\xd8\x14\xc0\x79\x24\x35\x10\x47\x5e\xc5\xd2\xce\x83\x80\x0b\xe5\x5f\x59\x01\x12\x4b\xe3\x2b\x70\x81\xca\xb3\x80\xa3\x31\x85\xa5\x05\xbe\x0a\xfd\xaf\xfc\x90\xe6\xcc\xf1\xd4\x9f\x04\x02\xad\xdb\x80\x7e\x86\xca\xe7\xd6\x7a\x04\x95\x83\xc4\xa0\x5b\x47\x9e\x4d\xd9\xf4\x78\x46\x2f\x57\xff\xff\x6e\x7a\x15\x7c\xf3\xc3\xf7\xe5\xc7\x5f\xd7\xc9\xc5\xb9\x63\xf9\xf1\xe4\xe4\xf2\xf2\x0a\x93\xb7\xe7\x17\xef\x3e\xc6\x3f\xbd\x7b\x7b\x72\x79\x95\x07\x47\x91\x47\xb8\xd1\xd6\x6a\x83\x09\xaa\xc8\x63\x4a\xab\x75\xa6\x0b\xfb\xe8\x8d\x14\x16\x7c\xb7\xce\xe1\x1a\x5d\xbd\x8f\x3c\xd1\x33\x4c\xca\x9a\x63\xd7\x97\xe5\x06\x73\x47\xac\xe1\x77\x73\xab\x39\xb1\x56\x8e\xad\xc0\xea\x0c\x7c\xae\xb3\xe0\x34\x3e\x9a\x1e\x9e\xcc\x66\xa7\xb1\x7f\x65\xc7\x59\x2e\x82\xc6\xe1\xd8\x12\x81\x75\xcc\x21\x0f\x0a\xac\xdc\x0c\x9a\x3b\x74\x12\xce\x3e\x7f\x76\x90\xe5\x92\x39\x20\x5e\xce\x12\xa8\xbf\x7a\xc4\xbf\xbd\x5d\x04\x8d\xc5\x26\x28\x83\x4e\x54\x2e\x96\x5a\xac\xdb\xbe\xc0\x92\xa0\x88\x3c\x29\x2a\xbe\x92\x59\x5b\xf7\xe9\xca\xb0\x3c\x07\x43\xaa\x7e\x89\xb6\x0e\xc4\xee\xfa\xd5\xbc\x8e\xb9\x41\x95\x74\xf1\xd6\xe6\x6c\x11\x54\x7f\x1f\x00\x74\xc7\x3b\xfd\x5a\xbd\x8e\xa1\xdf\xa5\xf7\x79\xd7\x73\xae\x2d\x3a\xd4\x6a\x4e\x62\xbc\x01\xf1\xf5\x2e\x9a\x02\x26\xa9\x9b\x93\x49\x18\x96\x69\x0f\xab\xef\x46\x03\xad\x7a\xd0\x92\xf1\xeb\xc4\xe8\x42\x89\x39\x59\x4a\xc6\xaf\x7b\xb8\x40\x9b\x4b\xb6\x9e\x93\x58\xc2\x4d\x0f\xbb\x2a\xac\xc3\x78\x4d\x37\x17\x72\x4e\x38\x28\x07\xa6\x67\xc5\x24\x26\x8a\xa2\x83\xcc\x8e\x58\x7c\xa2\xa8\x04\xdc\xcc\xc9\xe9\xe9\x69\x0f\xaa\xd5\x41\x89\x6e\x3d\x27\x29\x0a\x01\xaa\x67\xa0\x73\xc6\x6b\x34\xec\x01\xce\x30\xd5\x9e\xd7\x9d\x17\x12\x5a\x12\xfa\xc7\xf6\xa0\x9d\x58\x8f\x88\x44\x05\xac\x4b\xeb\xb6\x27\xc9\x26\x4a\xfa\x92\x74\xe9\xb5\x26\xcf\x30\xab\xde\x29\xa6\xdc\x18\xd5\xc9\xb8\x4d\x97\xf5\x00\xc3\xe1\x89\x7d\xb2\x55\xbc\xf6\x99\x6e\x75\x44\x55\xb9\xa2\x4b\xa9\xf7\xb4\xbe\x0b\x30\x03\x92\x39\x2c\x61\x38\x8e\x4e\xc2\xbc\x1f\x0a\x6d\xf4\xf5\xa0\x41\x66\xd5\xed\xea\xb1\x5b\xea\x1b\x6a\xf1\x13\xaa\x64\x4e\x96\xda\x08\x30\x74\xa9\xfb\x6b\x6c\xb7\x70\x3f\x77\xb6\xb4\x5a\x16\x6e\x84\xfb\xec\x68\x94\xfb\x00\x94\x31\x93\xa0\x9a\x93\x93\x3d\xa4\x61\x59\x23\xc4\x6a\x89\x82\xfc\x2f\x8e\xe3\x41\x23\x6a\x98\xc0\xc2\xce\xc9\x71\xf8\xbc\x7f\x37\x14\x66\xac\xa1\xbd\x3d\x9e\x89\x3f\xb5\x84\x17\x4b\xe4\x74\x09\x9f\x10\xcc\x8b\xd0\x3f\x3e\x20\xe1\x01\xa9\xdb\xc9\x4b\x82\x2a\xae\xd2\x5c\x7f\x87\x9b\xd5\xb8\x96\xda\xcc\x6b\x3a\x4d\x38\xe5\xcc\x80\x72\x63\xfd\x07\xa8\x35\x57\x2e\xa5\x3c\x45\x29\x5e\x4c\x5e\xf6\xa5\xdb\x6e\x81\x0a\xa8\xd5\xa1\xa1\x7f\x74\x6c\x1f\xe7\x76\xfa\x20\xb7\x87\x8f\xf4\x7a\xb8\xe7\xb5\xe3\x6c\x32\xc6\xf1\xd5\x35\xac\x63\xc3\x32\xb0\x64\xec\x32\x85\xcf\xfb\x5f\x48\x7b\x77\x63\x6d\xb2\x39\x31\xda\x31\x07\x2f\x42\x01\xc9\xcb\x9e\x4a\xb7\xbb\xc3\x49\xf8\x50\x67\x87\xb3\x2f\xb8\xbb\x6d\xf3\x4b\x37\xa9\x74\x73\x59\x95\x26\xc1\x90\xa6\xa1\x75\x12\x21\x85\xb2\x20\x81\x3b\x56\x3d\x5d\x1b\x44\x30\x73\xdd\xf6\x1b\x1d\x40\x8c\xe5\xc7\x8d\xd9\xd2\x30\x25\x86\x72\x64\x6b\xa7\x58\x59\xe7\x00\xa2\x34\x4d\x75\x09\xa6\x6f\x5c\x4f\x60\x9b\x12\x26\x18\x42\x6b\x8b\x74\xd6\x7a\x6c\xca\x81\xb3\x8b\xe9\xe1\xeb\xc2\xa5\x8b\x20\x9d\x0d\x79\x0c\x58\x9f\xd4\x48\xce\xde\x27\xca\x4a\xba\x74\xca\xab\x2b\x88\x76\x9b\x4e\x0d\xf2\xb6\x39\x53\x55\x25\x53\x35\xff\x0d\x26\xf7\xb3\xdd\x1b\xef\x4b\xa1\x58\xb9\xc3\x39\x03\x55\x7c\x49\x19\x09\xb1\x1b\xdc\xd8\xd0\xc1\x38\xb8\x71\xb4\x49\xe4\xa3\x32\x6d\x85\x0c\x12\x74\x69\xb1\xac\x0b\x48\x05\xd7\xda\x72\xa9\x0b\x11\xa4\x6b\x61\x18\xe5\x12\x41\x0d\x2e\xbc\x73\x36\x2d\x03\xe4\x7a\xf0\xf8\x77\x26\x60\x6b\x1d\xb3\x26\x2a\x2d\x89\xd9\xb6\xa4\x8a\x19\x6d\x08\x79\x84\x19\x64\xb4\xa9\x29\x22\xcf\x99\x02\xaa\x5a\x14\xef\xe3\x32\x26\x20\x19\x0c\x34\x32\x16\x6c\x0f\x08\x40\x53\x65\xa4\x87\x0a\xf2\x65\x11\x18\xe7\xba\xa8\x0e\xfa\x75\xd3\xf9\xf7\x64\xc7\x0a\xd9\x6e\xad\xbe\x29\x07\xeb\x4a\x7d\x63\x19\x6b\xed\xc0\x6c\x95\x69\x46\x99\xa3\xd3\xb1\x67\xc5\xe8\x15\x91\x50\x82\xbc\x2f\x72\xb9\x96\x74\x32\x6d\xe2\x71\x95\xa2\x83\xd1\xbb\x79\x17\x13\xa2\x7a\xca\xfe\xfa\x73\xf3\xb9\xba\x26\x5c\xe7\x6b\xaf\xbd\x7e\xa3\x1a\x5f\x4c\x0f\x1f\x20\x63\x77\xad\x2e\xbb\xc4\xb0\x35\x9d\x84\xe1\xc8\xa3\xd7\xbe\x68\x3b\xa6\xad\x78\xb9\xc1\x92\xf1\xb5\x77\xf6\xbe\xe9\x0c\x8b\x47\xfe\xfe\xfd\x0f\xf2\x78\xe7\x0e\x4c\x66\xbd\xb3\x0f\x55\x33\xf4\x56\xf6\x4e\x63\x57\xfe\x46\xc7\xed\x70\xf3\x9f\xd7\x22\xd8\xfc\x84\xf0\x4f\x00\x00\x00\xff\xff\xe7\xef\x27\x2e\x54\x10\x00\x00")

func ab_viewsLayoutTplHtmlBytes() ([]byte, error) {
	return bindataRead(
		_ab_viewsLayoutTplHtml,
		"ab_views/layout.tpl.html",
	)
}

func ab_viewsLayoutTplHtml() (*asset, error) {
	bytes, err := ab_viewsLayoutTplHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ab_views/layout.tpl.html", size: 4180, mode: os.FileMode(438), modTime: time.Unix(1651523774, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _ab_viewsLoginTplHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\xcb\x6e\xeb\x36\x14\x5c\x2b\x40\xfe\xe1\x80\x9b\xac\x68\xe5\xd1\x4d\x01\x49\x68\xd1\x76\x11\x20\x48\x83\xb6\xe8\xb6\xa0\xc5\x23\x8b\x0d\x1f\x02\x1f\x8e\x05\x41\x40\xbf\xa5\x9f\xd6\x2f\x29\x68\x53\x96\x7c\xe3\x04\x06\xee\xdd\xd8\x7c\xcc\x39\x33\x23\x0d\xa9\x61\xe0\xd8\x08\x8d\x40\x3a\xb6\x41\x2f\xbc\x44\x32\x8e\xcf\xf7\x0f\x3f\x06\xdf\x02\x85\x27\xb3\x81\x47\x3d\x0c\xa8\xf9\x38\x5e\x5f\x5d\x5f\xcd\x05\xb5\xd1\x1e\xb5\x27\x71\xbd\x70\x58\x7b\x61\x34\xd4\x92\x39\x57\x92\x34\x25\xd5\xf5\x15\x00\x40\xc1\xc5\x76\xda\x6a\xd1\x1a\x68\x82\x94\xae\xb6\x88\x1f\x42\xe8\xda\xf0\x7e\xda\xfc\x12\x90\xa8\x21\xd0\x1a\xb5\x47\x0b\xca\xd3\xef\x22\x38\xcb\xb2\xa2\x31\x56\x4d\xc0\x40\x1b\x89\x3b\x5a\x1b\x19\x94\x86\x40\xff\x0e\xce\x8b\xa6\x4f\x65\x04\xd8\x5e\x66\x49\x86\x41\x99\xa0\x7d\xc7\x7c\x8b\x1c\x88\x34\x1b\xa1\xc9\x38\x12\x50\xe8\x5b\xc3\x4b\xf2\xf2\xeb\xef\x7f\x24\x82\x6c\x18\xde\x84\x6f\x61\x85\xd6\x1a\x1b\xdd\xc7\xc5\x6c\xa9\xcf\x1b\xe6\x3c\xec\x7f\x29\xe5\x4c\x6f\xa2\xc4\x1d\xbd\x9d\x3a\x9c\xa2\xd7\x5e\xd3\x5a\x1a\x87\x04\x7c\xdf\x61\x49\xd6\xc1\x7b\xa3\x09\x18\x5d\x4b\x51\xbf\x96\xc4\xb7\xc2\xad\x3a\x66\x51\xfb\x67\xc3\x71\xe5\x7c\x2f\x71\xc5\x85\xeb\x24\xeb\xa1\x84\x1b\x6d\x34\xde\x90\xaa\xc8\xb9\xd8\xce\x1c\xdd\xc4\xa0\x2c\x7d\x20\xd5\x30\xac\xc6\xb1\xc8\xbb\x09\x70\x82\x2e\xd6\x16\xf2\xa3\xc1\xf4\xba\x97\x6e\x6b\x67\x9b\xbf\xbc\x79\x45\x3d\x5b\x16\xba\x0b\x3e\x89\x6e\x05\xe7\xa8\x09\x68\xa6\xb0\x24\x33\x9a\xc0\x96\xc9\x80\xf1\x19\xaf\xe2\x13\xfd\x94\xc4\x22\x17\xf6\x92\xfe\x7b\xe0\x45\xad\xb3\x42\xb2\x35\x4a\x68\x8c\x2d\x09\x2a\x26\x24\x99\xd3\x91\x72\x50\xfd\x12\xd7\x8b\x7c\x8f\xac\xce\xb1\x7b\xdc\xf9\x63\x5d\x4c\x18\x8d\x19\xb4\x46\xce\x19\x0c\xd4\x9a\xa0\x39\x95\x1b\xe8\xe8\x1d\xa8\x35\xbd\x07\xd5\xc7\x11\xdb\xd1\x37\xba\x73\x93\xf6\x24\xa2\x93\xac\xc6\xd6\x48\x8e\x51\xd8\x8e\xa9\x4e\xe2\x0f\xe9\x7f\x55\x1b\xb5\x74\xd7\x59\xa1\x98\xed\x1f\x7f\xfe\x33\x2e\x8d\xe3\x31\x48\x4b\x73\x1d\x73\xee\xcd\x58\x7e\xc6\xdf\x4b\xda\xfa\xcc\xe2\xbb\xf2\xaf\xb4\x39\xf7\x3b\x71\x7a\x5c\x9e\x93\xb7\x8f\x7b\x52\xe1\xc2\x5a\x09\x7f\xc6\xc2\x53\x3c\x93\x45\x7e\x00\x57\x67\x0e\x5d\x6d\x24\xbd\xbb\x87\xf8\xa6\xe8\xc6\xb2\x9e\x7e\x7f\x7b\x0b\x73\x7d\xaa\x98\x92\xa6\x0c\x0f\x12\xdd\x31\x25\x8b\x08\xd6\x66\x8b\x73\x08\xb3\xac\x60\xc7\x73\x7d\xd2\x5b\xed\xe8\x1d\x04\x08\xf4\x27\x02\xad\xc5\xe6\xdd\x35\x92\x5a\xc5\x8b\xa4\xfa\xed\x30\x2e\x72\x56\xcd\x8c\xcb\x98\xee\x67\x40\x67\xde\xff\xfe\xf9\x17\x2e\x17\xbd\x11\xce\x7f\x2b\xd5\x87\x5e\x49\xf6\x61\x72\xb1\xee\xc5\xa5\x52\xe4\x31\x41\xcb\x2b\x3c\xed\x7d\x34\x2e\xf2\xf4\xdd\xa8\xe2\x77\x66\x4f\xf2\x7f\x00\x00\x00\xff\xff\x68\x66\x17\xdf\xa0\x06\x00\x00")

func ab_viewsLoginTplHtmlBytes() ([]byte, error) {
	return bindataRead(
		_ab_viewsLoginTplHtml,
		"ab_views/login.tpl.html",
	)
}

func ab_viewsLoginTplHtml() (*asset, error) {
	bytes, err := ab_viewsLoginTplHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ab_views/login.tpl.html", size: 1696, mode: os.FileMode(438), modTime: time.Unix(1651606127, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _ab_viewsRecover_endTplHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\xcd\x6e\xe3\x36\x10\x3e\x2b\x40\xde\x61\xc0\x4b\xda\x03\xa5\xfc\xf4\x52\x40\x16\x50\xe4\x5a\xa4\x41\xda\x7b\x40\x8b\x23\x8b\x0d\x45\x0a\xfc\x71\x6c\x08\x02\xf6\x59\xf6\xd1\xf6\x49\x16\x92\x28\xcb\x76\x6c\x25\xd8\x5d\x60\x37\x07\x85\xf4\x7c\xf3\xc3\x99\xf9\x38\x6c\x1a\x8e\x85\x50\x08\xa4\x66\x2b\x74\xc2\x49\x24\x6d\xfb\x70\x7b\xf7\x97\x77\x25\x50\x78\xc2\x5c\xaf\xd1\x34\x0d\x2a\xde\xb6\x97\x17\x97\x17\x93\x46\xae\x95\x43\xe5\x48\xf7\x7b\x6a\x31\x77\x42\x2b\xc8\x25\xb3\x76\x41\xc2\x96\x64\x97\x17\x00\x00\x29\x17\xeb\x51\x54\xa2\xd1\x50\x78\x29\x6d\x6e\x10\xcf\x42\xe8\x52\xf3\xed\x28\x3c\x06\x04\xd7\xe0\x69\x8e\xca\xa1\x81\xca\xd1\x3f\x3a\x70\x14\x45\x69\xa1\x4d\x35\x02\x3d\x2d\x24\x6e\x68\xae\xa5\xaf\x14\x78\xfa\xbf\xb7\x4e\x14\xdb\xa0\x46\x80\xf5\x61\x2e\x48\xd3\x54\xda\x2b\x57\x33\x57\x22\x07\x62\x86\x63\x27\xa8\x38\x69\x5b\x02\x15\xba\x52\xf3\x05\x79\xfc\xe7\xdf\xff\x82\x9b\xa8\x69\x5e\x85\x2b\x21\x46\x63\xb4\xb1\x5d\x12\xe0\xc4\x5f\x40\xfd\x26\x14\xc7\x0d\xc4\x40\xc8\xef\xe7\xa0\x03\xdc\x30\xb5\x42\x88\xe7\x40\xfb\x99\x70\x9a\x59\x07\xfd\x97\x52\xde\xe9\x1a\xa8\x36\xf4\x7a\x3f\x73\xef\xd9\x58\x3a\x45\x73\xa9\x2d\x12\x70\xdb\x1a\x17\x64\xe9\x9d\xd3\x8a\x80\x56\xb9\x14\xf9\xcb\x82\xb8\x52\xd8\xb8\x66\x06\x95\x7b\xd0\x1c\x63\xeb\xb6\x12\x63\x2e\x6c\x2d\xd9\x16\x16\x70\xa5\xb4\xc2\x2b\x92\xa5\x09\x17\xeb\xf7\x3c\xd7\xa3\xdf\xca\xd0\x3b\x92\x35\x4d\xdc\xb6\x69\x52\xcf\xa8\xbd\x67\x36\x5d\x1a\x48\x66\xe4\xbb\xf6\x9d\x15\x0e\x45\x45\xc5\x81\x9e\xc2\xa6\x42\xd5\xde\x85\x0c\x95\x82\x73\x54\x04\x14\xab\xb0\x2b\xc2\x4b\xb7\x59\x33\xe9\xb1\xeb\xa5\x38\xf4\xcf\x73\x2f\xe8\x1a\x28\x39\x6a\x9a\xdc\x9a\x62\x94\x0e\x92\x68\xc6\xfe\x84\xde\x77\x72\x68\xf7\xcc\x09\x53\xc9\x96\x28\xa1\xd0\x66\x41\x6a\x66\xed\xab\x36\x9c\x4c\xec\x08\x3c\xc8\x1e\x83\x28\x4d\x7a\xfc\x89\x5c\x1e\x84\xf7\xc6\x52\xc7\x39\xda\xb1\xd2\x68\x39\xb1\xd2\x53\xa3\xbd\xe2\x54\xae\xa0\xa6\x37\x50\x2d\xe9\x2d\x54\x6c\x43\x5f\xe9\xc6\x8e\x67\x9b\x4c\xd5\x92\xe5\x58\x6a\xc9\xf1\x20\xd6\xdd\x81\x87\xcc\xd5\x06\x2d\x9a\x35\xb6\xed\x8e\x80\x15\x13\xb2\xdb\xc6\xdd\xa7\xcf\x43\xf8\x77\x8a\x04\x1f\xa5\x6d\xe0\xe1\x18\xc7\x2c\x1f\x6d\xcd\xd4\xd8\xc7\xfd\xfa\xdb\x5a\xf5\x6c\x11\xe7\xba\x72\xaf\xbe\xb9\x56\x85\x30\xd5\xf3\x4c\x9d\xef\x07\x08\xfc\xbc\x7a\xbf\x0d\xf2\x74\xdd\xbf\xbf\x74\xc7\x9e\x7e\x95\x12\x0e\x6c\x1f\xee\xd8\x90\x5f\xeb\x97\x95\x70\x27\xea\x15\xe6\x6f\x9a\x0c\xf0\x6c\xd4\x3e\x98\x85\x92\xde\xdc\x82\xc3\x8d\xa3\x2b\xc3\xb6\xf4\xcf\xeb\x6b\x98\x2c\x04\x8d\x31\x77\x95\xe6\x5e\xa2\xdd\xc5\xb1\x13\x84\x2b\x6b\x12\x44\x29\xdb\x0d\x99\x03\xdb\xd5\x86\xde\x80\x07\x4f\xef\x09\x94\x06\x8b\x37\xd3\x53\xea\x95\x50\xdd\xdc\xcc\xfe\xd6\x2b\x10\x2a\x4d\x58\x36\xb9\xdb\xbb\x6d\xa3\xe3\xac\x44\x5f\x3e\x7d\x86\x8f\x47\xbc\x12\xd6\xfd\x98\x90\x47\x5b\x7d\xd4\x4f\x61\xf3\xe1\xb8\xc7\xf9\xd4\x2f\x3b\x6a\xec\x3f\x5b\xf6\x66\xd7\xa9\x75\x9a\x84\xb7\x52\xd6\xbd\xad\x7a\x27\x5f\x03\x00\x00\xff\xff\xfa\x9d\x45\x2b\x95\x09\x00\x00")

func ab_viewsRecover_endTplHtmlBytes() ([]byte, error) {
	return bindataRead(
		_ab_viewsRecover_endTplHtml,
		"ab_views/recover_end.tpl.html",
	)
}

func ab_viewsRecover_endTplHtml() (*asset, error) {
	bytes, err := ab_viewsRecover_endTplHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ab_views/recover_end.tpl.html", size: 2453, mode: os.FileMode(438), modTime: time.Unix(1651606115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _ab_viewsRecover_startTplHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\xcb\x6e\xdb\x3a\x10\x5d\x3b\x40\xfe\x61\xc0\x4d\x56\xb4\xf2\xb8\x9b\x0b\x48\xc2\xbd\x28\xba\x2b\xd2\x22\xed\xbe\xa0\xc5\x91\xc5\x86\x0f\x81\x1c\x3a\x36\x04\x01\xfd\x96\x7e\x5a\xbf\xa4\xa0\x42\x59\x4e\xeb\x00\x59\x74\x63\x8b\x9c\x43\x9e\x73\xe6\xc1\x61\x90\xd8\x2a\x8b\xc0\x7a\xb1\x45\x52\xa4\x91\x8d\xe3\xfd\xed\xdd\xff\x91\x3a\xe0\xf0\x80\x8d\xdb\xa1\x1f\x06\xb4\x72\x1c\x2f\x2f\x2e\x2f\x96\x13\x8d\xb3\x84\x96\x58\xda\x2f\x03\x36\xa4\x9c\x85\x46\x8b\x10\x2a\x96\x97\xac\xbe\xbc\x00\x00\x28\xa5\xda\xcd\xa1\x0e\xbd\x83\x36\x6a\x1d\x1a\x8f\xf8\x2a\x84\x6f\x9c\x3c\xcc\xc1\xdf\x01\x99\x1a\x22\x6f\xd0\x12\x7a\x30\xc4\xff\x49\xe0\xd5\x6a\x55\xb6\xce\x9b\x19\x18\x79\xab\x71\xcf\x1b\xa7\xa3\xb1\x10\xf9\xb7\x18\x48\xb5\x87\x7c\x8c\x81\x98\x64\x56\x6c\x18\x8c\x8b\x96\x7a\x41\x1d\x4a\x60\xfe\xd9\x36\x1b\x47\x06\x06\xa9\x73\xb2\x62\x9f\x3e\x7e\xfe\x92\x29\x56\xc3\xf0\xa4\xa8\x83\x35\x7a\xef\x7c\xf2\x9f\x36\x57\xa7\x0a\xc9\x89\x40\x30\xfd\x72\x2e\x85\xdd\x26\x91\x7b\x7e\x3d\xdf\xf0\x12\xbd\x21\xcb\x1b\xed\x02\x32\xa0\x43\x8f\x15\xdb\x44\x22\x67\x19\x38\xdb\x68\xd5\x3c\x56\x8c\x3a\x15\xd6\xbd\xf0\x68\xe9\xde\x49\x5c\x07\x3a\x68\x5c\x4b\x15\x7a\x2d\x0e\x50\xc1\x95\x75\x16\xaf\x58\x5d\x16\x52\xed\x16\x8e\x7e\x66\x30\x9e\xdf\xb1\x7a\x18\xd6\xe3\x58\x16\xfd\x0c\x78\x81\x2e\x37\x1e\x8a\xa3\xc1\x5c\xf0\x53\xb7\x4d\xf0\xed\x57\x72\x8f\x68\x17\xcb\xca\xf6\x91\xb2\xe8\x4e\x49\x89\x96\x81\x15\x06\x2b\xb6\xa0\x19\xec\x84\x8e\x98\xb2\xbc\x4e\x19\x3d\x4b\xb2\x2a\xb5\xd8\xa0\x86\xd6\xf9\x8a\xa1\x11\x4a\xb3\xa5\x88\xb9\x5c\xf5\xfb\xb4\x5f\x16\x13\xb2\x3e\x27\x81\x70\x4f\xc7\x73\xa9\x11\x78\x6a\x15\xef\xf4\xd2\x2a\x91\x7b\x17\xad\xe4\x7a\x0b\x3d\xbf\x01\xb3\xe1\xb7\x60\x0e\xe9\x4b\xec\xf9\x13\xdf\x87\xd9\x40\x16\xd1\x6b\xd1\x60\xe7\xb4\xc4\x24\x6c\x2f\x4c\xaf\xf1\xbf\xfc\xbf\x6e\x9c\x61\x4b\xfe\xa6\xa2\x65\x25\x21\x6e\x8c\xa2\x33\x1e\xf2\x48\x95\xc5\x33\xbc\x3e\xd3\x3c\x8d\xd3\xfc\xe6\x16\x92\x19\xbe\xf5\xe2\xc0\xff\xbd\xbe\x86\xe5\x86\x7c\x62\x2e\x8b\x71\x32\x6a\x0c\xc7\x44\x1e\x03\xb9\x8b\x97\xc0\xaa\x14\xc7\xfe\x7c\x71\xb7\xd9\xf3\x1b\x88\x10\xf9\x3b\x06\x9d\xc7\xf6\x8f\x81\xd0\x6e\xab\x6c\x1a\x87\xfa\x83\xdb\x82\xb2\x65\x21\xea\x85\xee\xb4\x8c\xd3\x0a\xf8\x42\xfa\xf3\xfb\x0f\x78\xbb\xe2\xad\x0a\xf4\x77\x24\xcf\x77\x4d\xaa\x1f\xf2\xe2\xcd\xba\x4f\x26\xa3\x2c\x52\x23\x9d\xbe\x44\x39\xf6\xda\x77\x59\xe4\xe7\xaf\x4e\xcf\xe5\x44\xf2\x2b\x00\x00\xff\xff\xc6\x0b\x8a\x48\x68\x05\x00\x00")

func ab_viewsRecover_startTplHtmlBytes() ([]byte, error) {
	return bindataRead(
		_ab_viewsRecover_startTplHtml,
		"ab_views/recover_start.tpl.html",
	)
}

func ab_viewsRecover_startTplHtml() (*asset, error) {
	bytes, err := ab_viewsRecover_startTplHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ab_views/recover_start.tpl.html", size: 1384, mode: os.FileMode(438), modTime: time.Unix(1651606120, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _ab_viewsRecovery2faTplHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func ab_viewsRecovery2faTplHtmlBytes() ([]byte, error) {
	return bindataRead(
		_ab_viewsRecovery2faTplHtml,
		"ab_views/recovery2fa.tpl.html",
	)
}

func ab_viewsRecovery2faTplHtml() (*asset, error) {
	bytes, err := ab_viewsRecovery2faTplHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ab_views/recovery2fa.tpl.html", size: 0, mode: os.FileMode(438), modTime: time.Unix(1651482396, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _ab_viewsRegisterTplHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x56\xcb\x6e\xe3\x36\x14\x5d\x3b\x40\xfe\xe1\x82\x9b\x69\x17\x94\x92\x4c\x37\x05\x24\xa1\xc5\xa0\x9b\xa2\x48\x07\x33\xdd\x0f\x68\xf1\xca\x62\x87\x0f\x81\x0f\xc7\x86\x20\xa0\xdf\xd2\x4f\xeb\x97\x14\xb4\x29\xc9\x76\x3c\x81\x50\x34\xd9\x48\x22\x79\x78\x1f\xe7\x1e\x8a\xb7\xef\x39\x36\x42\x23\x90\x8e\x6d\xd0\x0b\x2f\x91\x0c\xc3\xe3\xc3\xfb\x9f\x83\x6f\x81\xc2\x27\xdc\x08\xe7\xd1\xf6\x3d\x6a\x3e\x0c\xb7\x37\xb7\x37\xf3\x96\xda\x68\x8f\xda\x93\x38\x5f\x38\xac\xbd\x30\x1a\x6a\xc9\x9c\x2b\x49\x1a\x92\xea\xf6\x06\x00\xa0\xe0\x62\x3b\x2e\xb5\x68\x0d\x34\x41\x4a\x57\x5b\xc4\x6f\x42\xe8\xda\xf0\xfd\xb8\x78\x09\x48\xae\x21\xd0\x1a\xb5\x47\x0b\xca\xd3\x1f\x22\x78\xb5\x5a\x15\x8d\xb1\x6a\x04\x06\xda\x48\xdc\xd1\xda\xc8\xa0\x34\x04\xfa\x67\x70\x5e\x34\xfb\xb4\x8d\x00\x3b\x84\x59\x92\xbe\x57\x26\x68\xdf\x31\xdf\x22\x07\x22\xcd\x46\x68\x32\x0c\x04\x14\xfa\xd6\xf0\x92\x7c\xfc\xfd\xf3\x1f\xc9\xc1\xaa\xef\x9f\x84\x6f\x21\x43\x6b\x8d\x8d\xd9\xaf\x4e\x66\xbf\x13\x9a\xe3\x0e\x32\x20\xe4\xfb\x69\x6d\xd5\xf7\x96\xe9\x0d\x42\x36\x4f\xad\x4e\x13\xf2\x86\x39\x0f\x87\x27\xa5\x3c\x42\x2d\xa8\x1d\xbd\x1b\x5d\x5e\xe2\xd7\x5e\xd3\x5a\x1a\x87\x04\xfc\xbe\xc3\x92\xac\x83\xf7\x46\x13\x30\xba\x96\xa2\xfe\x5a\x12\xdf\x0a\x97\x75\xcc\xa2\xf6\x8f\x86\x63\xe6\xfc\x5e\x62\xc6\x85\xeb\x24\xdb\x43\x09\xef\xb4\xd1\xf8\x8e\x54\x45\xce\xc5\xf6\xd4\x4b\x37\xfa\x50\x96\xbe\x27\x55\xdf\x67\xc3\x50\xe4\xdd\x0c\xb9\xd8\x51\xac\x2d\xe4\xd5\x9c\x68\x52\xca\xf3\xd1\xc5\xe0\xc8\x61\xed\x6c\xf3\xc5\x9b\xaf\xa8\xa7\x4d\x85\xd0\x5d\xf0\x29\xaf\x56\x70\x8e\x9a\x80\x66\x0a\x4b\x32\xa3\x09\x6c\x99\x0c\x18\x2b\x97\xc5\x3a\xe5\xd5\x0b\x4e\x2c\x72\x61\x97\xd8\x3f\x00\x17\x99\x2e\x24\x5b\xa3\x84\xc6\xd8\x92\xa0\x62\x42\x92\x59\x72\x49\x5c\xd5\x23\x53\x58\xe4\x07\x60\x75\xcd\xb7\xc7\x9d\x9f\xb6\x45\xd5\xd2\xa8\x6b\x6b\xe4\xac\xeb\x40\xad\x09\x9a\x53\xb9\x81\x8e\xde\x83\x5a\xd3\x07\x50\x6c\x47\x9f\xe8\xce\x8d\x41\xc7\x27\x81\x4e\xb2\x1a\x5b\x23\x39\xda\x92\xfc\x6a\x5a\x0d\x9f\x95\xf0\xed\x24\xa0\x25\x01\xff\x12\xe7\xdf\x20\xe2\xe4\xff\x2c\x64\xdc\x31\xd5\x49\xfc\x29\xbd\xb3\xda\xa8\x93\x42\x1c\xeb\xd8\x59\x74\x68\xb7\x38\x0c\xd3\x11\x8c\x96\xe2\x30\x8b\x8f\x43\x7d\xd2\x6b\x4a\xfc\xec\xb4\xba\x2b\x47\x32\xd9\x98\x05\xed\x3a\xa6\x47\xdd\x1f\xbe\x97\x6b\x1d\xe8\x2c\xb3\x13\xc2\x3b\xe6\xdc\x93\xb1\xfc\x0a\xe7\x1f\xd3\xd2\x4b\xb4\x3f\xdb\xfe\xdf\xa9\x9f\x4d\x9d\xb1\x3f\x4f\xbf\x09\xe5\xa3\xbb\xd7\x65\xbd\x36\xba\x11\x56\x7d\x79\x81\xfd\x0f\x47\x08\xbc\x71\x15\x9e\x47\x76\xbd\x1a\x8b\x09\xbd\x34\xf8\x0a\xc4\x1e\x6f\x98\xc4\x85\x0b\x6b\x25\xfc\x15\x42\xc7\x8e\xa1\xc8\x8f\xf8\x89\xc9\xb3\xdb\x5b\xd2\xfb\x07\x88\x3f\x13\xba\xb1\x6c\x4f\x7f\xbc\xbb\x83\xd9\xc4\x45\xce\xca\xf0\x20\xf1\x2c\xe9\xf1\xaf\x5e\x9b\x2d\xda\xd3\x54\xd9\x74\x9f\x9e\xd9\x56\x3b\x7a\x0f\x01\x02\xfd\x40\xa0\xb5\xd8\x3c\xbb\xef\x93\xa9\x78\xe3\x57\x9f\x8e\xdf\x45\xce\x16\x32\xb3\xfa\xe7\xaf\xbf\x61\x69\xd0\x87\xce\xe2\xff\x08\x79\x6a\x51\xaa\xdf\xcc\x06\x84\x5e\x1c\xef\xc9\xf5\x5d\xe4\x51\xc2\xa7\x3d\x56\x5a\xfb\xd6\x77\x91\xa7\xc6\xae\x8a\x8d\xe0\xc1\xc9\xbf\x01\x00\x00\xff\xff\xf0\x40\x2a\x65\x43\x0a\x00\x00")

func ab_viewsRegisterTplHtmlBytes() ([]byte, error) {
	return bindataRead(
		_ab_viewsRegisterTplHtml,
		"ab_views/register.tpl.html",
	)
}

func ab_viewsRegisterTplHtml() (*asset, error) {
	bytes, err := ab_viewsRegisterTplHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ab_views/register.tpl.html", size: 2627, mode: os.FileMode(438), modTime: time.Unix(1651606138, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"ab_views/layout.tpl.html":        ab_viewsLayoutTplHtml,
	"ab_views/login.tpl.html":         ab_viewsLoginTplHtml,
	"ab_views/recover_end.tpl.html":   ab_viewsRecover_endTplHtml,
	"ab_views/recover_start.tpl.html": ab_viewsRecover_startTplHtml,
	"ab_views/recovery2fa.tpl.html":   ab_viewsRecovery2faTplHtml,
	"ab_views/register.tpl.html":      ab_viewsRegisterTplHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"ab_views": &bintree{nil, map[string]*bintree{
		"layout.tpl.html":        &bintree{ab_viewsLayoutTplHtml, map[string]*bintree{}},
		"login.tpl.html":         &bintree{ab_viewsLoginTplHtml, map[string]*bintree{}},
		"recover_end.tpl.html":   &bintree{ab_viewsRecover_endTplHtml, map[string]*bintree{}},
		"recover_start.tpl.html": &bintree{ab_viewsRecover_startTplHtml, map[string]*bintree{}},
		"recovery2fa.tpl.html":   &bintree{ab_viewsRecovery2faTplHtml, map[string]*bintree{}},
		"register.tpl.html":      &bintree{ab_viewsRegisterTplHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
